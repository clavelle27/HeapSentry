The exploit code is a contrived version of a bookstore where user can specify books that he wants
to read on the command line. The bookstore then opens and displays the contents of the book to
the user. There are only two books in the store - HarryPorter.txt ( you can specify anything that has
"harry" inside it to read this book) and KiteRunner.txt( you can specify anything that has "kite" inside
it to read this book). One way of reading both books is-
./bookstore Harry Kite
Or
./bookstore HarryPotter.txt KiteRunner.txt

This opens and displays one book at a time with some delay in b/w just to mimic book loading etc

Now if you wanto run the exploit code, we will do it like this-
./bookstore /bin/bash `perl -e 'printf "A" x 32 . "\xf0\xa8\xa5\xf7\xff\x7f\x00\x00"'`

The fancy hex numbers in the perl printf is nothing but the address of system() function
in libc on my system, which is 0x00007ffff7a5a8f0. On your machine it would be different
and you need to find it out once by hooking on to a simple hello world program in gdb.
The exploit code overwrites a function pointer that's original purpose was to open the user desired book with
the address of system() function. And instead of passing the book's name to the open_book func, we now
pass /bin/bash to system() with this exploit.

GDB disables ASLR by default for the debugged process. Hence the above address of system()
is the same across multiple runs of the program. But without GDB, we have to do it ourselves.
Sample code is shown in run.sh in the same dir for reference. run.sh can run both normal as well as exploit code.
Just pass "normal" as command line param to run.sh to run the bookstore in normal fashion. With no params, exploit 
code will run.
